{"ast":null,"code":"import { SET_IMPLICIT_GRANT_CREDENTIALS, SET_BOARD, SET_SELECTED } from \"../constants/action-types\";\nimport * as moment from 'moment';\n\nfunction getMoves(board, pieceLocation, players) {\n  let piece = board[pieceLocation.x][pieceLocation.y];\n  let possibleMoves = [];\n  console.log(piece.owner);\n  let moveTemplate = {\n    pawn_w: [{\n      type: \"SINGLE\",\n      direction: {\n        x: 1,\n        y: 1\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: false\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: -1,\n        y: 1\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: false\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: 0,\n        y: 1\n      },\n      takeable: false,\n      onlyOnTake: false,\n      jumpable: false\n    }\n    /*{\r\n        type: \"CONTINUOUS\",\r\n        direction: {\r\n            x: -1,\r\n            y: 1\r\n        },\r\n        takeable: true,\r\n        jumpable: false,\r\n    }*/\n    ],\n    pawn_b: [{\n      type: \"SINGLE\",\n      direction: {\n        x: 1,\n        y: -1\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: false\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: -1,\n        y: -1\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: false\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: 0,\n        y: -1\n      },\n      takeable: false,\n      onlyOnTake: false,\n      jumpable: false\n    }],\n    rook_w: [{\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 0,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 0,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: 0\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: 0\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }],\n    bishop_w: [{\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }],\n    bishop_b: [{\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }],\n    rook_b: [{\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 0,\n        y: 1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 0,\n        y: -1\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 1,\n        y: 0\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: -1,\n        y: 0\n      },\n      onlyOnTake: false,\n      takeable: true,\n      jumpable: false\n    }],\n    knight_w: [{\n      type: \"SINGLE\",\n      direction: {\n        x: 1,\n        y: 2\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: true\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: -1,\n        y: 2\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: true\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: 1,\n        y: -2\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: true\n    }, {\n      type: \"SINGLE\",\n      direction: {\n        x: -1,\n        y: -2\n      },\n      takeable: true,\n      onlyOnTake: true,\n      jumpable: true\n    }]\n  };\n\n  if (moveTemplate[piece.type] !== undefined) {\n    console.log(\"this piece's moves are defined\");\n    let pieceTemplate = moveTemplate[piece.type];\n    pieceTemplate.forEach(moveSet => {\n      console.log(moveSet);\n\n      if (moveSet.type === \"SINGLE\") {\n        try {\n          let moveLocation = {\n            x: pieceLocation.x + moveSet.direction.x,\n            y: pieceLocation.y + moveSet.direction.y\n          };\n          let moveSquare = board[moveLocation.x][moveLocation.y];\n\n          if (moveSquare.type === null) {\n            if (!moveSet.onlyOnTake) {\n              possibleMoves.push(moveLocation);\n            }\n          } else {\n            //need to check if the piece on the target square is takeable\n            console.log(moveSquare.type);\n            let piece1Colour = piece.type.split(\"_\")[1];\n            let piece2Colour = moveSquare.type.split(\"_\")[1];\n\n            if (piece1Colour !== piece2Colour) {\n              if (moveSet.takeable) {\n                possibleMoves.push(moveLocation);\n              }\n            }\n          }\n        } catch (error) {\n          console.log(error);\n          console.log(\"move outside board boundaries\");\n        }\n      } else {\n        console.log(\"here at least\");\n        let attempt = 1;\n\n        while (true) {\n          let moveLocation = {\n            x: pieceLocation.x + moveSet.direction.x * attempt,\n            y: pieceLocation.y + moveSet.direction.y * attempt\n          };\n\n          try {\n            let moveSquare = board[moveLocation.x][moveLocation.y];\n\n            if (moveSquare.type === null) {\n              possibleMoves.push(moveLocation);\n            } else {\n              //need to check if the piece on the target square is takeable\n              console.log(moveSquare.type);\n              let piece1Colour = piece.type.split(\"_\")[1];\n              let piece2Colour = moveSquare.type.split(\"_\")[1];\n\n              if (piece1Colour !== piece2Colour) {\n                if (moveSet.takeable) {\n                  possibleMoves.push(moveLocation);\n                }\n\n                if (!moveSet.jumpable) {\n                  console.log(\"end of row\");\n                  break;\n                }\n              } else {\n                break;\n              }\n            }\n          } catch {\n            console.log(\"Square Outside Boundaries of the board\");\n            break;\n          }\n\n          attempt++;\n        }\n      }\n    });\n  }\n\n  return possibleMoves;\n}\n\nfunction appReducer(state, action) {\n  //tell redux how to deal with data in each action case. one for each action.\n  let newstate = null;\n  console.log(action);\n\n  if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) {\n    //after getting access token \n    newstate = { ...state,\n      loggedIn: true,\n      loginErrorMessage: null,\n      access_token: action.payload.access_token,\n      implicitGrantExpiry: moment().add(86398, 'seconds')\n    };\n  } else if (action.type === SET_BOARD) {\n    newstate = { ...state,\n      highlightedSquares: [],\n      selectedSquare: {\n        x: null,\n        y: null\n      },\n      board: action.payload.board\n    };\n  } else if (action.type === SET_SELECTED) {\n    let highlightedSquares = [];\n\n    try {\n      if (state.board[action.payload.selected.x][action.payload.selected.y].type !== null) {\n        console.log(\"this is a piece\");\n        highlightedSquares = getMoves(state.board, action.payload.selected);\n      }\n    } catch {}\n\n    newstate = { ...state,\n      selectedSquare: action.payload.selected,\n      highlightedSquares: highlightedSquares\n    };\n  } else {\n    newstate = { ...state\n    };\n  }\n\n  return newstate;\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Jack/OneDrive/Documents/Long Chess/React Version/src/Redux/reducers/reducer.js"],"names":["SET_IMPLICIT_GRANT_CREDENTIALS","SET_BOARD","SET_SELECTED","moment","getMoves","board","pieceLocation","players","piece","x","y","possibleMoves","console","log","owner","moveTemplate","pawn_w","type","direction","takeable","onlyOnTake","jumpable","pawn_b","rook_w","bishop_w","bishop_b","rook_b","knight_w","undefined","pieceTemplate","forEach","moveSet","moveLocation","moveSquare","push","piece1Colour","split","piece2Colour","error","attempt","appReducer","state","action","newstate","loggedIn","loginErrorMessage","access_token","payload","implicitGrantExpiry","add","highlightedSquares","selectedSquare","selected"],"mappings":"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","sourcesContent":["import {\r\n    SET_IMPLICIT_GRANT_CREDENTIALS,\r\n    SET_BOARD,\r\n    SET_SELECTED\r\n} from \"../constants/action-types\";\r\nimport * as moment from 'moment';\r\n\r\nfunction getMoves(board, pieceLocation, players) {\r\n    let piece = board[pieceLocation.x][pieceLocation.y];\r\n    let possibleMoves = [];\r\n    console.log(piece.owner);\r\n    let moveTemplate = {\r\n        pawn_w: [\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 1\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: false\r\n\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 1\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: false\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: 1\r\n                },\r\n                takeable: false,\r\n                onlyOnTake: false,\r\n                jumpable: false\r\n            },\r\n            /*{\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 1\r\n                },\r\n                takeable: true,\r\n                jumpable: false,\r\n            }*/\r\n        ],\r\n        pawn_b: [\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: -1\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: false\r\n\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: -1\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: false\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: -1\r\n                },\r\n                takeable: false,\r\n                onlyOnTake: false,\r\n                jumpable: false\r\n            }\r\n        ],\r\n        rook_w: [\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            }, \r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 0\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 0\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n        ],\r\n        bishop_w: [\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            }, \r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n        ],\r\n        bishop_b: [\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            }, \r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n        ],\r\n        rook_b: [\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: 1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            }, \r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 0,\r\n                    y: -1\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 0\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 0\r\n                },\r\n                onlyOnTake: false,\r\n                takeable: true,\r\n                jumpable: false,\r\n            },\r\n        ],\r\n        knight_w: [\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 2\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: true\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: 2\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: true\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: -2\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: true\r\n            },\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: -1,\r\n                    y: -2\r\n                },\r\n                takeable: true,\r\n                onlyOnTake: true,\r\n                jumpable: true\r\n            },\r\n            \r\n        ]\r\n    }\r\n\r\n    if (moveTemplate[piece.type] !== undefined) {\r\n        console.log(\"this piece's moves are defined\");\r\n        let pieceTemplate = moveTemplate[piece.type];\r\n        pieceTemplate.forEach(moveSet => {\r\n            console.log(moveSet);\r\n            if (moveSet.type === \"SINGLE\") {\r\n                try {\r\n                    let moveLocation = {\r\n                        x: pieceLocation.x + moveSet.direction.x,\r\n                        y: pieceLocation.y + moveSet.direction.y\r\n                    }\r\n                    let moveSquare = board[moveLocation.x][moveLocation.y];\r\n                    if (moveSquare.type === null) {\r\n                        if (!moveSet.onlyOnTake) {\r\n                            possibleMoves.push(moveLocation);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //need to check if the piece on the target square is takeable\r\n                        console.log(moveSquare.type);\r\n                        let piece1Colour = piece.type.split(\"_\")[1];\r\n                        let piece2Colour = moveSquare.type.split(\"_\")[1];\r\n                        if (piece1Colour !== piece2Colour) {\r\n                            if (moveSet.takeable) {\r\n                                possibleMoves.push(moveLocation);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.log(error);\r\n                    console.log(\"move outside board boundaries\")\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"here at least\");\r\n                let attempt = 1;\r\n                while (true) {\r\n                    let moveLocation = {\r\n                        x: pieceLocation.x + (moveSet.direction.x * attempt),\r\n                        y: pieceLocation.y + (moveSet.direction.y * attempt)\r\n                    }\r\n                    try {\r\n                        let moveSquare = board[moveLocation.x][moveLocation.y];\r\n                        if (moveSquare.type === null) {\r\n                            possibleMoves.push(moveLocation);\r\n                        }\r\n                        else {\r\n                            //need to check if the piece on the target square is takeable\r\n                            console.log(moveSquare.type);\r\n                            let piece1Colour = piece.type.split(\"_\")[1];\r\n                            let piece2Colour = moveSquare.type.split(\"_\")[1];\r\n                            if (piece1Colour !== piece2Colour) {\r\n                                if (moveSet.takeable) {\r\n                                    possibleMoves.push(moveLocation);\r\n                                }\r\n                                if (!moveSet.jumpable) {\r\n                                    console.log(\"end of row\");\r\n                                    break;\r\n                                }\r\n                            }\r\n                            else{\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    catch {\r\n                        console.log(\"Square Outside Boundaries of the board\");\r\n                        break;\r\n                    }\r\n                    attempt++;\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return possibleMoves;\r\n}\r\n\r\nfunction appReducer(state, action) {\r\n    //tell redux how to deal with data in each action case. one for each action.\r\n    let newstate = null;\r\n    console.log(action);\r\n    if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) { //after getting access token \r\n        newstate = {\r\n            ...state,\r\n            loggedIn: true,\r\n            loginErrorMessage: null,\r\n            access_token: action.payload.access_token,\r\n            implicitGrantExpiry: moment().add(86398, 'seconds'),\r\n        };\r\n    }\r\n    else if (action.type === SET_BOARD) {\r\n        newstate = {\r\n            ...state,\r\n            highlightedSquares: [],\r\n            selectedSquare: {\r\n                x: null,\r\n                y: null\r\n            },\r\n            board: action.payload.board\r\n        }\r\n    }\r\n    else if (action.type === SET_SELECTED) {\r\n        let highlightedSquares = [];\r\n        try{\r\n            if (state.board[action.payload.selected.x][action.payload.selected.y].type !== null) {\r\n                console.log(\"this is a piece\");\r\n                highlightedSquares = getMoves(state.board, action.payload.selected);\r\n            }\r\n        }\r\n        catch{\r\n\r\n        }\r\n        newstate = {\r\n            ...state,\r\n            selectedSquare: action.payload.selected,\r\n            highlightedSquares: highlightedSquares\r\n        }\r\n    }\r\n    else {\r\n        newstate = { ...state };\r\n    }\r\n\r\n    return newstate;\r\n}\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}