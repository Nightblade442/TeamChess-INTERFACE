{"ast":null,"code":"import { SET_IMPLICIT_GRANT_CREDENTIALS, //SET_QUEUE_LIST,\n//SET_QUEUE\nSET_USER_LIST, SET_USER, SET_USER_CONVERSATIONS } from \"../constants/action-types\";\nimport * as moment from 'moment';\n\nfunction appReducer(state, action) {\n  //tell redux how to deal with data in each action case. one for each action.\n  let newstate = null;\n\n  if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) {\n    //after getting access token \n    newstate = { ...state,\n      loggedIn: true,\n      loginErrorMessage: null,\n      implicitGrantCredentialsToken: action.payload.access_token,\n      implicitGrantExpiry: moment().add(86398, 'seconds')\n    };\n  }\n  /*  else if (action.type === SET_USER_LIST) {//once we have gotten list of purecloud users in the org.\r\n        newstate = {\r\n            ...state,\r\n            userList: action.payload\r\n        }\r\n    }\r\n    else if (action.type === SET_USER) { // set the userId + userName of the user which was clicked on in the list displayed in app.\r\n        newstate = {\r\n            ...state,\r\n            userId: action.payload.userId,\r\n            userName: action.payload.userName\r\n        }\r\n        newstate.conversationsUpdated = false;\r\n    }\r\n    else if (action.type === SET_USER_CONVERSATIONS) {//once the purecloud server has responded with the specified users list of active conversations update them here.\r\n        // if(action.payload.conversations != undefined){\r\n        console.log(action.payload.conversations);\r\n        let conversations = filter(action.payload.conversations, state.userId)\r\n        newstate = {\r\n            ...state,\r\n            userConversations: conversations\r\n        }\r\n        newstate.conversationsUpdated = true;\r\n        // }\r\n        /* else{\r\n             newstate = {\r\n                 ...state,\r\n                 userConversations: undefined\r\n             }\r\n             newstate.conversationsUpdated = true; \r\n         }\r\n    }*/\n  else {\n    newstate = { ...state\n    };\n  }\n\n  return newstate;\n}\n\nfunction filter(conversations, userId) {\n  //filter the list of conversations, returning only those where the selected user has answered the conversation... instead of all of those which alerted the user in the queue, but were not answered. \n  console.log(userId);\n  let returnConversations = [];\n\n  if (conversations === undefined) {\n    return undefined;\n  }\n\n  conversations.forEach(conversation => {\n    let participant = findParticipant(userId, conversation.participants);\n\n    if (participant.sessions[participant.sessions.length - 1].metrics[1].name === \"tAnswered\") {\n      returnConversations.push(conversation);\n    }\n  });\n  return returnConversations;\n}\n\nfunction findParticipant(userId, participants) {\n  //searches through the list of participants to find the participantId of the specified user. if multiple returns the latest i.e. most current\n  var participantId = undefined;\n  participants.forEach(participant => {\n    if (participant.userId === undefined) {} else {\n      if (participant.userId === userId) {\n        participantId = participant;\n      }\n    }\n  });\n  return participantId;\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Jack/OneDrive/Documents/WrenData2021/ReserveAgents/reservation-client/src/Redux/reducers/reducer.js"],"names":["SET_IMPLICIT_GRANT_CREDENTIALS","SET_USER_LIST","SET_USER","SET_USER_CONVERSATIONS","moment","appReducer","state","action","newstate","type","loggedIn","loginErrorMessage","implicitGrantCredentialsToken","payload","access_token","implicitGrantExpiry","add","filter","conversations","userId","console","log","returnConversations","undefined","forEach","conversation","participant","findParticipant","participants","sessions","length","metrics","name","push","participantId"],"mappings":"AAAA,SAEIA,8BAFJ,EAGI;AACA;AACAC,aALJ,EAMIC,QANJ,EAMcC,sBANd,QAOO,2BAPP;AAQA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACnC;AACI,MAAIC,QAAQ,GAAG,IAAf;;AACA,MAAID,MAAM,CAACE,IAAP,KAAgBT,8BAApB,EAAoD;AAAE;AAClDQ,IAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPI,MAAAA,QAAQ,EAAE,IAFH;AAGPC,MAAAA,iBAAiB,EAAE,IAHZ;AAIPC,MAAAA,6BAA6B,EAAEL,MAAM,CAACM,OAAP,CAAeC,YAJvC;AAKPC,MAAAA,mBAAmB,EAAEX,MAAM,GAAGY,GAAT,CAAa,KAAb,EAAoB,SAApB;AALd,KAAX;AAOH;AAEH;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCI,OA0CK;AACDR,IAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,KAAX;AACH;;AAED,SAAOE,QAAP;AACH;;AAED,SAASS,MAAT,CAAgBC,aAAhB,EAA+BC,MAA/B,EAAuC;AAAE;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,MAAIG,mBAAmB,GAAG,EAA1B;;AACA,MAAGJ,aAAa,KAAKK,SAArB,EAA+B;AAC3B,WAAOA,SAAP;AACH;;AACDL,EAAAA,aAAa,CAACM,OAAd,CAAsBC,YAAY,IAAI;AAClC,QAAIC,WAAW,GAAGC,eAAe,CAACR,MAAD,EAASM,YAAY,CAACG,YAAtB,CAAjC;;AACA,QAAIF,WAAW,CAACG,QAAZ,CAAqBH,WAAW,CAACG,QAAZ,CAAqBC,MAArB,GAA8B,CAAnD,EAAsDC,OAAtD,CAA8D,CAA9D,EAAiEC,IAAjE,KAA0E,WAA9E,EAA2F;AACvFV,MAAAA,mBAAmB,CAACW,IAApB,CAAyBR,YAAzB;AACH;AACJ,GALD;AAMA,SAAOH,mBAAP;AACH;;AAED,SAASK,eAAT,CAAyBR,MAAzB,EAAiCS,YAAjC,EAA+C;AAAE;AAC7C,MAAIM,aAAa,GAAGX,SAApB;AACAK,EAAAA,YAAY,CAACJ,OAAb,CAAqBE,WAAW,IAAI;AAChC,QAAIA,WAAW,CAACP,MAAZ,KAAuBI,SAA3B,EAAsC,CACrC,CADD,MACO;AACH,UAAIG,WAAW,CAACP,MAAZ,KAAuBA,MAA3B,EAAmC;AAC/Be,QAAAA,aAAa,GAAGR,WAAhB;AACH;AACJ;AACJ,GAPD;AAQA,SAAOQ,aAAP;AACH;;AAID,eAAe7B,UAAf","sourcesContent":["import {\r\n\r\n    SET_IMPLICIT_GRANT_CREDENTIALS,\r\n    //SET_QUEUE_LIST,\r\n    //SET_QUEUE\r\n    SET_USER_LIST,\r\n    SET_USER, SET_USER_CONVERSATIONS\r\n} from \"../constants/action-types\";\r\nimport * as moment from 'moment';\r\n\r\nfunction appReducer(state, action) {\r\n//tell redux how to deal with data in each action case. one for each action.\r\n    let newstate = null;\r\n    if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) { //after getting access token \r\n        newstate = {\r\n            ...state,\r\n            loggedIn: true,\r\n            loginErrorMessage: null,\r\n            implicitGrantCredentialsToken: action.payload.access_token,\r\n            implicitGrantExpiry: moment().add(86398, 'seconds'),\r\n        };\r\n    }\r\n\r\n  /*  else if (action.type === SET_USER_LIST) {//once we have gotten list of purecloud users in the org.\r\n        newstate = {\r\n            ...state,\r\n            userList: action.payload\r\n        }\r\n    }\r\n    else if (action.type === SET_USER) { // set the userId + userName of the user which was clicked on in the list displayed in app.\r\n        newstate = {\r\n            ...state,\r\n            userId: action.payload.userId,\r\n            userName: action.payload.userName\r\n        }\r\n        newstate.conversationsUpdated = false;\r\n    }\r\n    else if (action.type === SET_USER_CONVERSATIONS) {//once the purecloud server has responded with the specified users list of active conversations update them here.\r\n        // if(action.payload.conversations != undefined){\r\n        console.log(action.payload.conversations);\r\n        let conversations = filter(action.payload.conversations, state.userId)\r\n        newstate = {\r\n            ...state,\r\n            userConversations: conversations\r\n        }\r\n        newstate.conversationsUpdated = true;\r\n        // }\r\n        /* else{\r\n             newstate = {\r\n                 ...state,\r\n                 userConversations: undefined\r\n             }\r\n             newstate.conversationsUpdated = true; \r\n         }\r\n    }*/\r\n    else {\r\n        newstate = { ...state };\r\n    }\r\n\r\n    return newstate;\r\n}\r\n\r\nfunction filter(conversations, userId) { //filter the list of conversations, returning only those where the selected user has answered the conversation... instead of all of those which alerted the user in the queue, but were not answered. \r\n    console.log(userId);\r\n\r\n    let returnConversations = [];\r\n    if(conversations === undefined){\r\n        return undefined;\r\n    }\r\n    conversations.forEach(conversation => {\r\n        let participant = findParticipant(userId, conversation.participants);\r\n        if (participant.sessions[participant.sessions.length - 1].metrics[1].name === \"tAnswered\") {\r\n            returnConversations.push(conversation);\r\n        }\r\n    });\r\n    return returnConversations;\r\n}\r\n\r\nfunction findParticipant(userId, participants) { //searches through the list of participants to find the participantId of the specified user. if multiple returns the latest i.e. most current\r\n    var participantId = undefined\r\n    participants.forEach(participant => {\r\n        if (participant.userId === undefined) {\r\n        } else {\r\n            if (participant.userId === userId) {\r\n                participantId = participant;\r\n            }\r\n        }\r\n    });\r\n    return participantId;\r\n}\r\n\r\n\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}