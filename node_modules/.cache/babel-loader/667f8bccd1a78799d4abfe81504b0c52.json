{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jack.JACKLAPTOP\\\\Documents\\\\Long Chess\\\\React Version\\\\src\\\\Components\\\\Board\\\\Board.js\";\n//import logo from './logo.svg';\n//import './App.css';\nimport { Redirect } from 'react-router-dom';\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport store from \"../../Redux/store\";\nimport { connect } from \"react-redux\";\nimport { setImplicitGrantCredentials, setBoard } from \"../../Redux/actions/action\";\nimport Piece from '../Piece/Piece';\nimport styles from './Board.module.css';\nimport getMove from '../../API/getMove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    app: state\n  };\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    setImplicitGrantCredentials: props => store.dispatch(setImplicitGrantCredentials(props)),\n    setBoard: props => store.dispatch(setBoard(props)) //  setUsers: props => store.dispatch(setUsers(props))\n\n  };\n};\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dimensions: {\n        width: null,\n        height: null\n      }\n    };\n    this.resize = this.resize.bind(this);\n    this.update = this.update.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resize);\n    this.resize();\n    setInterval(e => {\n      this.update();\n    }, 10000);\n  }\n\n  render() {\n    console.log(this.props.app.board);\n    let params = {};\n    let html = null;\n\n    if (this.state.dimensions.height !== null) {\n      let colour = \"WHITE\";\n      let board = [];\n\n      for (const file of this.props.app.board) {\n        let fileArr = [];\n\n        for (const square of file) {\n          if (square !== null) {\n            params = {\n              squareSize: Math.floor(this.state.dimensions.height / 8),\n              colour: colour,\n              ...square\n            };\n          } else {\n            params = {\n              squareSize: Math.floor(this.state.dimensions.height / 8),\n              colour: colour,\n              type: null,\n              selected: false\n            };\n          }\n\n          fileArr.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(Piece, {\n              params: params\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this));\n\n          if (colour === 'WHITE') {\n            colour = 'BLACK';\n          } else {\n            colour = 'WHITE';\n          }\n        }\n\n        board.push( /*#__PURE__*/_jsxDEV(\"td\", {\n          children: fileArr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 28\n        }, this));\n\n        if (colour === 'WHITE') {\n          colour = 'BLACK';\n        } else {\n          colour = 'WHITE';\n        }\n      }\n\n      html = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Board,\n        id: \"Board\",\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this);\n    } else {\n      html = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Board,\n        id: \"Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this);\n    }\n\n    return html;\n  }\n\n  resize() {\n    let div = document.getElementById(\"Board\");\n\n    if (div !== undefined) {\n      this.setState({\n        dimensions: {\n          width: div.clientWidth,\n          height: div.clientHeight\n        }\n      });\n    }\n  }\n\n  update() {\n    if (this.props.app.gameId != undefined) {\n      let params = {\n        token: this.props.app.token,\n        playerId: this.props.app.playerId,\n        username: this.props.app.username,\n        gameId: this.props.app.gameId\n      };\n      getMove(params).then(response => {\n        let payload = { ...response.game\n        };\n        this.props.setBoard(payload);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n\n} //export default App;\n//export default App = connect(mapStateToProps)(App);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","map":{"version":3,"sources":["C:/Users/Jack.JACKLAPTOP/Documents/Long Chess/React Version/src/Components/Board/Board.js"],"names":["Redirect","React","Component","useState","useEffect","useRef","store","connect","setImplicitGrantCredentials","setBoard","Piece","styles","getMove","mapStateToProps","state","app","mapDispatchToProps","props","dispatch","Board","constructor","dimensions","width","height","resize","bind","update","componentDidMount","window","addEventListener","setInterval","e","render","console","log","board","params","html","colour","file","fileArr","square","squareSize","Math","floor","type","selected","push","div","document","getElementById","undefined","setState","clientWidth","clientHeight","gameId","token","playerId","username","then","response","payload","game","catch","error"],"mappings":"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","sourcesContent":["//import logo from './logo.svg';\r\n//import './App.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport React, { Component, useState, useEffect, useRef } from 'react';\r\nimport store from \"../../Redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport { setImplicitGrantCredentials, setBoard } from \"../../Redux/actions/action\";\r\n\r\nimport Piece from '../Piece/Piece';\r\nimport styles from './Board.module.css'\r\n\r\nimport getMove from '../../API/getMove';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        app: state,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = state => {\r\n    return {\r\n        setImplicitGrantCredentials: props => store.dispatch(setImplicitGrantCredentials(props)),\r\n        setBoard: props => store.dispatch(setBoard(props)),\r\n        //  setUsers: props => store.dispatch(setUsers(props))\r\n    };\r\n};\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dimensions: {\r\n                width: null,\r\n                height: null,\r\n            }\r\n        }\r\n        this.resize = this.resize.bind(this);\r\n        this.update = this.update.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.resize);\r\n        this.resize();\r\n        setInterval(e => {\r\n            this.update()\r\n        },\r\n        10000\r\n        )\r\n    }\r\n\r\n    render() {\r\nconsole.log(this.props.app.board);\r\n\r\n        let params = {}\r\n        let html = null;\r\n        if (this.state.dimensions.height !== null) {\r\n            let colour = \"WHITE\";\r\n            let board = []\r\n            for (const file of this.props.app.board) {\r\n                let fileArr = [];\r\n                for (const square of file) {\r\n                    if (square !== null) {\r\n                        params = {\r\n                            squareSize: Math.floor(this.state.dimensions.height / 8),\r\n                            colour: colour,\r\n                            ...square,\r\n                        }\r\n                    }\r\n                    else {\r\n                        params = {\r\n                            squareSize: Math.floor(this.state.dimensions.height / 8),\r\n                            colour: colour,\r\n                            type: null,\r\n                            selected: false\r\n                        }\r\n                    }\r\n                    fileArr.push(\r\n                        <tr>\r\n                            <Piece params={params}></Piece>\r\n                        </tr>\r\n                    )\r\n\r\n                    if (colour === 'WHITE') {\r\n                        colour = 'BLACK'\r\n                    } else {\r\n                        colour = 'WHITE'\r\n                    }\r\n                }\r\n                board.push(<td>\r\n                    {fileArr}\r\n                </td>)\r\n                if (colour === 'WHITE') {\r\n                    colour = 'BLACK'\r\n                } else {\r\n                    colour = 'WHITE'\r\n                }\r\n            }\r\n            html = (\r\n                <div className={styles.Board} id=\"Board\">\r\n                    {board}\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            html = (\r\n                <div className={styles.Board} id=\"Board\">\r\n                </div>\r\n            )\r\n        }\r\n        return html;\r\n    }\r\n\r\n    resize() {\r\n        let div = document.getElementById(\"Board\");\r\n        if (div !== undefined) {\r\n            this.setState({\r\n                dimensions: {\r\n                    width: div.clientWidth,\r\n                    height: div.clientHeight,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    update(){\r\n        if(this.props.app.gameId != undefined){\r\n            let params = {\r\n                token : this.props.app.token,\r\n                playerId : this.props.app.playerId,\r\n                username: this.props.app.username,\r\n                gameId: this.props.app.gameId\r\n            }\r\n\r\n            getMove(params)\r\n            .then(response => {\r\n                let payload = {\r\n                    ...response.game,\r\n                }\r\n                this.props.setBoard(payload);\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//export default App;\r\n//export default App = connect(mapStateToProps)(App);\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n"]},"metadata":{},"sourceType":"module"}