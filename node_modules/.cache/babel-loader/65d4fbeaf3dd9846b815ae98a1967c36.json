{"ast":null,"code":"import { SET_IMPLICIT_GRANT_CREDENTIALS, SET_BOARD, SET_SELECTED } from \"../constants/action-types\";\nimport * as moment from 'moment';\n\nfunction getMoves(board, pieceLocation) {\n  let piece = board[pieceLocation.x][pieceLocation.y];\n  let possibleMoves = [];\n  let moveTemplate = {\n    pawn_w: [{\n      type: \"SINGLE\",\n      direction: {\n        x: 1,\n        y: 1\n      },\n      takeable: false,\n      jumpable: false\n    }, {\n      type: \"CONTINUOUS\",\n      direction: {\n        x: 0,\n        y: 1\n      },\n      takeable: true,\n      jumpable: false\n    }]\n  };\n\n  if (moveTemplate[piece.type] !== undefined) {\n    console.log(\"this piece's moves are defined\");\n    let pieceTemplate = moveTemplate[piece.type];\n    pieceTemplate.forEach(moveSet => {\n      if (moveSet.type === \"SINGLE\") {\n        console.log(moveSet);\n\n        try {\n          let moveLocation = {\n            x: pieceLocation.x + moveSet.direction.x,\n            y: pieceLocation.y + moveSet.direction.y\n          };\n          console.log(moveLocation);\n          let moveSquare = board[moveLocation.x][moveLocation.y];\n\n          if (moveSquare.type === null) {\n            possibleMoves.push(moveLocation);\n          } else {//need to check if the piece on the target square is takeable\n          }\n        } catch (error) {\n          console.log(error);\n          console.log(\"move outside board boundaries\");\n        }\n      } else {}\n    });\n  }\n\n  return possibleMoves;\n}\n\nfunction appReducer(state, action) {\n  //tell redux how to deal with data in each action case. one for each action.\n  let newstate = null;\n  console.log(action.type);\n\n  if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) {\n    //after getting access token \n    newstate = { ...state,\n      loggedIn: true,\n      loginErrorMessage: null,\n      access_token: action.payload.access_token,\n      implicitGrantExpiry: moment().add(86398, 'seconds')\n    };\n  } else if (action.type === SET_BOARD) {\n    newstate = { ...state,\n      highlightedSquares: [],\n      selectedSquare: {\n        x: null,\n        y: null\n      },\n      board: action.payload.board\n    };\n  } else if (action.type === SET_SELECTED) {\n    let highlightedSquares = [];\n\n    if (state.board[action.payload.selected.x][action.payload.selected.y].type !== null) {\n      console.log(\"this is a piece\");\n      highlightedSquares = getMoves(state.board, action.payload.selected);\n    }\n\n    newstate = { ...state,\n      selectedSquare: action.payload.selected,\n      highlightedSquares: highlightedSquares\n    };\n  } else {\n    newstate = { ...state\n    };\n  }\n\n  return newstate;\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Jack/OneDrive/Documents/Long Chess/React Version/src/Redux/reducers/reducer.js"],"names":["SET_IMPLICIT_GRANT_CREDENTIALS","SET_BOARD","SET_SELECTED","moment","getMoves","board","pieceLocation","piece","x","y","possibleMoves","moveTemplate","pawn_w","type","direction","takeable","jumpable","undefined","console","log","pieceTemplate","forEach","moveSet","moveLocation","moveSquare","push","error","appReducer","state","action","newstate","loggedIn","loginErrorMessage","access_token","payload","implicitGrantExpiry","add","highlightedSquares","selectedSquare","selected"],"mappings":"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","sourcesContent":["import {\r\n    SET_IMPLICIT_GRANT_CREDENTIALS,\r\n    SET_BOARD,\r\n    SET_SELECTED\r\n} from \"../constants/action-types\";\r\nimport * as moment from 'moment';\r\n\r\nfunction getMoves(board, pieceLocation){\r\n     let piece = board[pieceLocation.x][pieceLocation.y];\r\n     let possibleMoves = [];\r\n\r\n    let moveTemplate = {\r\n        pawn_w : [\r\n            {\r\n                type: \"SINGLE\",\r\n                direction: {\r\n                    x: 1,\r\n                    y: 1\r\n                },\r\n                takeable: false,\r\n                jumpable: false\r\n                \r\n            },\r\n            {\r\n                type: \"CONTINUOUS\",\r\n                direction : {\r\n                    x : 0,\r\n                    y : 1\r\n                },\r\n                takeable: true,\r\n                jumpable: false\r\n            }\r\n        ]\r\n    }\r\n\r\n     if(moveTemplate[piece.type] !== undefined){\r\n         console.log(\"this piece's moves are defined\");\r\n        let pieceTemplate = moveTemplate[piece.type];\r\n        pieceTemplate.forEach(moveSet => {\r\n           \r\n            if(moveSet.type === \"SINGLE\"){\r\n                console.log(moveSet);\r\n                try{\r\n                    let moveLocation = {\r\n                        x: pieceLocation.x + moveSet.direction.x,\r\n                        y: pieceLocation.y + moveSet.direction.y\r\n                    }\r\n                    console.log(moveLocation);\r\n                    let moveSquare = board[moveLocation.x][moveLocation.y];\r\n                    if(moveSquare.type === null){\r\n                        possibleMoves.push(moveLocation);\r\n                    }\r\n                    else{\r\n                        //need to check if the piece on the target square is takeable\r\n                    }\r\n                }\r\n                catch(error){\r\n                    console.log(error);\r\n                    console.log(\"move outside board boundaries\")\r\n                }\r\n            }\r\n            else{\r\n\r\n            }\r\n        })\r\n     }\r\n     return possibleMoves;\r\n}\r\n\r\nfunction appReducer(state, action) {\r\n    //tell redux how to deal with data in each action case. one for each action.\r\n    let newstate = null;\r\n    console.log(action.type);\r\n    if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) { //after getting access token \r\n        newstate = {\r\n            ...state,\r\n            loggedIn: true,\r\n            loginErrorMessage: null,\r\n            access_token: action.payload.access_token,\r\n            implicitGrantExpiry: moment().add(86398, 'seconds'),\r\n        };\r\n    }\r\n    else if(action.type === SET_BOARD){\r\n        newstate = {\r\n            ...state,\r\n            highlightedSquares : [],\r\n            selectedSquare : {\r\n                x : null,\r\n                y : null\r\n            },\r\n            board : action.payload.board\r\n        }\r\n    }\r\n    else if(action.type === SET_SELECTED){\r\n        let highlightedSquares = [];\r\n        if(state.board[action.payload.selected.x][action.payload.selected.y].type !== null){\r\n            console.log(\"this is a piece\");\r\n            highlightedSquares = getMoves(state.board, action.payload.selected);\r\n        }\r\n        newstate = {\r\n            ...state,\r\n            selectedSquare : action.payload.selected,\r\n            highlightedSquares : highlightedSquares\r\n        }\r\n    }\r\n    else {\r\n        newstate = { ...state };\r\n    }\r\n\r\n    return newstate;\r\n}\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}