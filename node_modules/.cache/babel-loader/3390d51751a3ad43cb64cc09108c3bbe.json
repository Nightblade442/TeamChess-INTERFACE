{"ast":null,"code":"import { SET_IMPLICIT_GRANT_CREDENTIALS, SET_BOARD } from \"../constants/action-types\";\nimport * as moment from 'moment';\n\nfunction appReducer(state, action) {\n  //tell redux how to deal with data in each action case. one for each action.\n  let newstate = null;\n\n  if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) {\n    //after getting access token \n    newstate = { ...state,\n      loggedIn: true,\n      loginErrorMessage: null,\n      access_token: action.payload.access_token,\n      implicitGrantExpiry: moment().add(86398, 'seconds')\n    };\n  } else if (action.type === SET_BOARD) {\n    newstate = { ...state,\n      board: action.payload.board\n    };\n  } else {\n    newstate = { ...state\n    };\n  }\n\n  return newstate;\n}\n\nexport default appReducer;","map":{"version":3,"sources":["C:/Users/Jack/OneDrive/Documents/Long Chess/React Version/src/Redux/reducers/reducer.js"],"names":["SET_IMPLICIT_GRANT_CREDENTIALS","SET_BOARD","moment","appReducer","state","action","newstate","type","loggedIn","loginErrorMessage","access_token","payload","implicitGrantExpiry","add","board"],"mappings":"AAAA,SAEIA,8BAFJ,EAGIC,SAHJ,QAIO,2BAJP;AAKA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AAC/B;AACA,MAAIC,QAAQ,GAAG,IAAf;;AACA,MAAID,MAAM,CAACE,IAAP,KAAgBP,8BAApB,EAAoD;AAAE;AAClDM,IAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPI,MAAAA,QAAQ,EAAE,IAFH;AAGPC,MAAAA,iBAAiB,EAAE,IAHZ;AAIPC,MAAAA,YAAY,EAAEL,MAAM,CAACM,OAAP,CAAeD,YAJtB;AAKPE,MAAAA,mBAAmB,EAAEV,MAAM,GAAGW,GAAT,CAAa,KAAb,EAAoB,SAApB;AALd,KAAX;AAOH,GARD,MASK,IAAGR,MAAM,CAACE,IAAP,KAAgBN,SAAnB,EAA6B;AAC9BK,IAAAA,QAAQ,GAAG,EACP,GAAGF,KADI;AAEPU,MAAAA,KAAK,EAAGT,MAAM,CAACM,OAAP,CAAeG;AAFhB,KAAX;AAIH,GALI,MAMA;AACDR,IAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,KAAX;AACH;;AAED,SAAOE,QAAP;AACH;;AAED,eAAeH,UAAf","sourcesContent":["import {\r\n\r\n    SET_IMPLICIT_GRANT_CREDENTIALS,\r\n    SET_BOARD\r\n} from \"../constants/action-types\";\r\nimport * as moment from 'moment';\r\n\r\nfunction appReducer(state, action) {\r\n    //tell redux how to deal with data in each action case. one for each action.\r\n    let newstate = null;\r\n    if (action.type === SET_IMPLICIT_GRANT_CREDENTIALS) { //after getting access token \r\n        newstate = {\r\n            ...state,\r\n            loggedIn: true,\r\n            loginErrorMessage: null,\r\n            access_token: action.payload.access_token,\r\n            implicitGrantExpiry: moment().add(86398, 'seconds'),\r\n        };\r\n    }\r\n    else if(action.type === SET_BOARD){\r\n        newstate = {\r\n            ...state,\r\n            board : action.payload.board\r\n        }\r\n    }\r\n    else {\r\n        newstate = { ...state };\r\n    }\r\n\r\n    return newstate;\r\n}\r\n\r\nexport default appReducer;"]},"metadata":{},"sourceType":"module"}