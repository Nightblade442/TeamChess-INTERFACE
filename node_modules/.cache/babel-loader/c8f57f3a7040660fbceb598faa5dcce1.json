{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jack\\\\OneDrive\\\\Documents\\\\WrenData2021\\\\ReserveAgents\\\\reservation-client\\\\src\\\\App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport store from \"./Redux/store\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    app: state\n  };\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    setImplicitGrantCredentials: props => store.dispatch(setImplicitGrantCredentials(props)),\n    //setQueues: props => store.dispatch(setQueues(props))\n    setUsers: props => store.dispatch(setUsers(props))\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  /*\n    componentDidMount() {\n  \n  \n      \n      if (this.props.app.loggedIn === false) { //if not logged in, redirect to purecloud login.\n  \n        let id = this.props.app.pureCloudImplicitGrantClientId;\n        let url = this.props.app.pureCloudImplicitGrantCallbackUrl;\n        window.location.replace(`https://login.mypurecloud.ie/oauth/authorize?client_id=${id}&response_type=token&redirect_uri=${url}`);\n      }\n      else {\n        //this.props.fetchScheduleActivityReport({token:this.props.app.ImplicitGrantCredentialsToken});\n      }\n      /*if(this.props.category.app.initialised === false){\n        this.props.fetchCategories({ parentID: null, initial: true })\n      }*/\n  //this.getCategories();\n  //}\n\n\n  render() {\n    var params = {// access_token: this.props.app.implicitGrantCredentialsToken,\n      // origin: this.props.app.origin,\n    };\n\n    if (this.props.app.loggedIn) {\n      // if we already have access token loaded\n      let html = null; //html is the variable we are rendering into, \n\n      if (this.props.app.userList === null) {\n        //if have not fetched the list of users in the organisation do so. \n        getUsers(params) // get the list of users\n        .then(results => {\n          this.props.setUsers(results); //dispatch the results to the store.\n        }).catch(error => {// don't really need to do anyting here... perhaps add some error message. \n          //console.log(error);\n        });\n      } else {\n        //once the users are in the store\n        html = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Hello There..\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: html\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this);\n    } else {\n      // redirect to purecloud to authenticate and get token, then redirect back to start of app.\n      window.location.replace(`https://login.mypurecloud.ie/oauth/authorize?client_id=${this.props.app.clientId}&response_type=token&redirect_uri=${this.props.app.callbackUrl}`);\n      return null;\n    }\n  }\n\n} //export default App;\n//export default App = connect(mapStateToProps)(App);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/Jack/OneDrive/Documents/WrenData2021/ReserveAgents/reservation-client/src/App.js"],"names":["React","Component","store","connect","mapStateToProps","state","app","mapDispatchToProps","setImplicitGrantCredentials","props","dispatch","setUsers","App","constructor","render","params","loggedIn","html","userList","getUsers","then","results","catch","error","window","location","replace","clientId","callbackUrl"],"mappings":";;AACA,OAAO,WAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,GAAG,EAAED;AADA,GAAP;AAGD,CAJD;;AAMA,MAAME,kBAAkB,GAAGF,KAAK,IAAI;AAClC,SAAO;AACLG,IAAAA,2BAA2B,EAAEC,KAAK,IAAIP,KAAK,CAACQ,QAAN,CAAeF,2BAA2B,CAACC,KAAD,CAA1C,CADjC;AAEL;AACAE,IAAAA,QAAQ,EAAEF,KAAK,IAAIP,KAAK,CAACQ,QAAN,CAAeC,QAAQ,CAACF,KAAD,CAAvB;AAHd,GAAP;AAKD,CAND;;AAQA,MAAMG,GAAN,SAAkBX,SAAlB,CAA4B;AAC1BY,EAAAA,WAAW,CAACJ,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACA;;;AAEAK,EAAAA,MAAM,GAAG;AAEP,QAAIC,MAAM,GAAG,CACZ;AACA;AAFY,KAAb;;AAKA,QAAI,KAAKN,KAAL,CAAWH,GAAX,CAAeU,QAAnB,EAA6B;AAAE;AAC7B,UAAIC,IAAI,GAAG,IAAX,CAD2B,CACV;;AACjB,UAAI,KAAKR,KAAL,CAAWH,GAAX,CAAeY,QAAf,KAA4B,IAAhC,EAAsC;AAAE;AACtCC,QAAAA,QAAQ,CAACJ,MAAD,CAAR,CAAiB;AAAjB,SACGK,IADH,CACQC,OAAO,IAAI;AACf,eAAKZ,KAAL,CAAWE,QAAX,CAAoBU,OAApB,EADe,CACc;AAC9B,SAHH,EAIGC,KAJH,CAISC,KAAK,IAAI,CAAE;AAChB;AACD,SANH;AAOD,OARD,MAQO;AAAE;AACPN,QAAAA,IAAI,gBACF;AAAA,iCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD;;AAED,0BAAQ;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,kBACLA;AADK;AAAA;AAAA;AAAA;AAAA,cAAR;AAGD,KAvBD,MAwBK;AAAE;AACLO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAyB,0DAAyD,KAAKjB,KAAL,CAAWH,GAAX,CAAeqB,QAAS,qCAAoC,KAAKlB,KAAL,CAAWH,GAAX,CAAesB,WAAY,EAAzK;AACA,aAAO,IAAP;AACD;AACF;;AA3DyB,C,CA+D5B;AACA;;;AACA,eAAezB,OAAO,CAACC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CK,GAA7C,CAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React, { Component } from 'react';\nimport store from \"./Redux/store\";\nimport { connect } from \"react-redux\";\n\n\n\nconst mapStateToProps = state => {\n  return {\n    app: state,\n  };\n};\n\nconst mapDispatchToProps = state => {\n  return {\n    setImplicitGrantCredentials: props => store.dispatch(setImplicitGrantCredentials(props)),\n    //setQueues: props => store.dispatch(setQueues(props))\n    setUsers: props => store.dispatch(setUsers(props))\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  /*\n    componentDidMount() {\n  \n  \n      \n      if (this.props.app.loggedIn === false) { //if not logged in, redirect to purecloud login.\n  \n        let id = this.props.app.pureCloudImplicitGrantClientId;\n        let url = this.props.app.pureCloudImplicitGrantCallbackUrl;\n        window.location.replace(`https://login.mypurecloud.ie/oauth/authorize?client_id=${id}&response_type=token&redirect_uri=${url}`);\n      }\n      else {\n        //this.props.fetchScheduleActivityReport({token:this.props.app.ImplicitGrantCredentialsToken});\n      }\n      /*if(this.props.category.app.initialised === false){\n        this.props.fetchCategories({ parentID: null, initial: true })\n      }*/\n  //this.getCategories();\n  //}\n\n  render() {\n\n    var params = {\n     // access_token: this.props.app.implicitGrantCredentialsToken,\n     // origin: this.props.app.origin,\n    }\n\n    if (this.props.app.loggedIn) { // if we already have access token loaded\n      let html = null; //html is the variable we are rendering into, \n      if (this.props.app.userList === null) { //if have not fetched the list of users in the organisation do so. \n        getUsers(params) // get the list of users\n          .then(results => {\n            this.props.setUsers(results);//dispatch the results to the store.\n          })\n          .catch(error => { // don't really need to do anyting here... perhaps add some error message. \n            //console.log(error);\n          })\n      } else { //once the users are in the store\n        html = (\n          <div>\n           <h1>Hello There..</h1>\n          </div>\n\n        )\n\n      }\n\n      return (<div className=\"App\">\n        {html}\n      </div>)\n    }\n    else { // redirect to purecloud to authenticate and get token, then redirect back to start of app.\n      window.location.replace(`https://login.mypurecloud.ie/oauth/authorize?client_id=${this.props.app.clientId}&response_type=token&redirect_uri=${this.props.app.callbackUrl}`);\n      return null;\n    }\n  }\n\n}\n\n//export default App;\n//export default App = connect(mapStateToProps)(App);\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}